@page
@model SmokingCessationSupportPlatform.Web.Pages.ChatModel
@{
}
@section Head {
    <link rel="stylesheet" href="~/css/chat.css" />
    <link rel="stylesheet" href="~/css/chat-user.css" /> 
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
}
<div class="main-content">
    <h1>Trò chuyện với @Model.PartnerType (@Model.PartnerId)</h1>
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger" role="alert">
            @TempData["ErrorMessage"]
        </div>
    }

    @if (Model.ConversationId != 0) 
    {
        <div class="chat-container">
            <div class="message-list" id="messagesList">
                @if (Model.Messages != null && Model.Messages.Any())
                {
                    @foreach (var message in Model.Messages.OrderBy(m => m.SentAt))
                    {   
                        var isMyMessage = (message.FromId == Model.CurrentUserId && message.FromType == Model.CurrentUserType);
                        <div class="message @(isMyMessage ? "mine" : "other")">
                            <div>
                                @if (!isMyMessage) 
                                {
                                    <div class="message-sender-name">
                                        @message.FromName 
                                    </div>
                                }
                                <div class="message-bubble">
                                    @message.Content
                                </div>
                                <div class="message-info">
                                    @message.SentAt.ToString("HH:mm dd/MM") @(isMyMessage && message.IsRead ? "✔️" : "")
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <p class="no-messages">Chưa có tin nhắn nào trong cuộc trò chuyện này. Hãy gửi tin nhắn đầu tiên!</p>
                }
            </div>

            <form method="post" asp-page-handler="OnPostAsync" class="chat-input-form">
                <textarea asp-for="MessageContent" placeholder="Nhập tin nhắn của bạn..." required rows="3"></textarea>
                <span asp-validation-for="MessageContent" class="text-danger"></span>

                <input type="hidden" asp-for="ConversationId" />
                <input type="hidden" asp-for="PartnerId" />
                <input type="hidden" asp-for="PartnerType" />

                <button type="submit">Gửi</button>
            </form>
        </div>
    }
    else
    {
        <p>Không thể tạo hoặc tìm thấy cuộc trò chuyện. Vui lòng thử lại.</p>
    }
</div>

@section Scripts {
    <script src="~/js/signalr/dist/browser/signalr.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub") 
            .withAutomaticReconnect()
            .build();

        const messagesList = document.getElementById("messagesList");
        const chatInput = document.querySelector(".chat-input-form textarea");

        function scrollToBottom() {
            if (messagesList) {
                messagesList.scrollTop = messagesList.scrollHeight;
            }
        }

        
        function appendMessage(message, isMine) {
            const messageDiv = document.createElement("div");
            messageDiv.classList.add("message", isMine ? "mine" : "other");

            const contentDiv = document.createElement("div");

            if (!isMine) { 
                const senderNameDiv = document.createElement("div");
                senderNameDiv.classList.add("message-sender-name");
                senderNameDiv.textContent = message.fromName; 
                contentDiv.appendChild(senderNameDiv);
            }

            const bubbleDiv = document.createElement("div");
            bubbleDiv.classList.add("message-bubble");
            bubbleDiv.textContent = message.content;

            const infoDiv = document.createElement("div");
            infoDiv.classList.add("message-info");
            const sentAt = new Date(message.sentAt);
            infoDiv.textContent = sentAt.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) + (isMine && message.isRead ? " ✔️" : "");

            contentDiv.appendChild(bubbleDiv);
            contentDiv.appendChild(infoDiv);
            messageDiv.appendChild(contentDiv);
            messagesList.appendChild(messageDiv);
            scrollToBottom();
        }

        connection.on("ReceiveMessage", function (message) {
            const currentUserId = @Model.CurrentUserId;
            const currentUserType = "@Model.CurrentUserType";
            const isMine = (message.fromId === currentUserId && message.fromType === currentUserType);

            if (message.conversationId === @Model.ConversationId) {
                appendMessage(message, isMine);

                if (!isMine) { 
                    connection.invoke("MarkMessagesAsRead", message.conversationId, currentUserId, currentUserType)
                        .catch(err => console.error(err.toString()));
                }
            }
        });

        connection.start().then(function () {
            console.log("SignalR Connected!");
            const conversationId = @Model.ConversationId;
            if (conversationId) {
                connection.invoke("JoinChat", conversationId.toString())
                    .catch(err => console.error(err.toString()));
            }
            scrollToBottom(); 
        }).catch(function (err) {
            console.error(err.toString());
        });

        if (chatInput) {
            chatInput.addEventListener('input', function () {
                this.style.height = 'auto';
                this.style.height = (this.scrollHeight) + 'px';
            });
        }
    </script>
}