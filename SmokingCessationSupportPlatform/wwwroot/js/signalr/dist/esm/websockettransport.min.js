/**
 * Minified by jsDelivr using Terser v5.37.0.
 * Original file: /npm/@microsoft/signalr@8.0.7/dist/esm/WebSocketTransport.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{HeaderNames}from"./HeaderNames";import{LogLevel}from"./ILogger";import{TransferFormat}from"./ITransport";import{Arg,getDataDetail,getUserAgentHeader,Platform}from"./Utils";export class WebSocketTransport{constructor(e,t,o,r,s,n){this._logger=o,this._accessTokenFactory=t,this._logMessageContent=r,this._webSocketConstructor=s,this._httpClient=e,this.onreceive=null,this.onclose=null,this._headers=n}async connect(e,t){let o;return Arg.isRequired(e,"url"),Arg.isRequired(t,"transferFormat"),Arg.isIn(t,TransferFormat,"transferFormat"),this._logger.log(LogLevel.Trace,"(WebSockets transport) Connecting."),this._accessTokenFactory&&(o=await this._accessTokenFactory()),new Promise(((r,s)=>{let n;e=e.replace(/^http/,"ws");const i=this._httpClient.getCookieString(e);let a=!1;if(Platform.isNode||Platform.isReactNative){const t={},[r,s]=getUserAgentHeader();t[r]=s,o&&(t[HeaderNames.Authorization]=`Bearer ${o}`),i&&(t[HeaderNames.Cookie]=i),n=new this._webSocketConstructor(e,void 0,{headers:{...t,...this._headers}})}else o&&(e+=(e.indexOf("?")<0?"?":"&")+`access_token=${encodeURIComponent(o)}`);n||(n=new this._webSocketConstructor(e)),t===TransferFormat.Binary&&(n.binaryType="arraybuffer"),n.onopen=t=>{this._logger.log(LogLevel.Information,`WebSocket connected to ${e}.`),this._webSocket=n,a=!0,r()},n.onerror=e=>{let t=null;t="undefined"!=typeof ErrorEvent&&e instanceof ErrorEvent?e.error:"There was an error with the transport",this._logger.log(LogLevel.Information,`(WebSockets transport) ${t}.`)},n.onmessage=e=>{if(this._logger.log(LogLevel.Trace,`(WebSockets transport) data received. ${getDataDetail(e.data,this._logMessageContent)}.`),this.onreceive)try{this.onreceive(e.data)}catch(e){return void this._close(e)}},n.onclose=e=>{if(a)this._close(e);else{let t=null;t="undefined"!=typeof ErrorEvent&&e instanceof ErrorEvent?e.error:"WebSocket failed to connect. The connection could not be found on the server, either the endpoint may not be a SignalR endpoint, the connection ID is not present on the server, or there is a proxy blocking WebSockets. If you have multiple servers check that sticky sessions are enabled.",s(new Error(t))}}}))}send(e){return this._webSocket&&this._webSocket.readyState===this._webSocketConstructor.OPEN?(this._logger.log(LogLevel.Trace,`(WebSockets transport) sending data. ${getDataDetail(e,this._logMessageContent)}.`),this._webSocket.send(e),Promise.resolve()):Promise.reject("WebSocket is not in the OPEN state")}stop(){return this._webSocket&&this._close(void 0),Promise.resolve()}_close(e){this._webSocket&&(this._webSocket.onclose=()=>{},this._webSocket.onmessage=()=>{},this._webSocket.onerror=()=>{},this._webSocket.close(),this._webSocket=void 0),this._logger.log(LogLevel.Trace,"(WebSockets transport) socket closed."),this.onclose&&(!this._isCloseEvent(e)||!1!==e.wasClean&&1e3===e.code?e instanceof Error?this.onclose(e):this.onclose():this.onclose(new Error(`WebSocket closed with status code: ${e.code} (${e.reason||"no reason given"}).`)))}_isCloseEvent(e){return e&&"boolean"==typeof e.wasClean&&"number"==typeof e.code}}
//# sourceMappingURL=/sm/07148b4ad0e5828edd480a63957de46d3f6f13c6fbec462bb7874ff5b805ae9c.map